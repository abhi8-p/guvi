Loading...
Copy of Numpy_tasks.ipynb
Copy of Numpy_tasks.ipynb_
Copy of Numpy_tasks.ipynb​
Numpy
1. Import the numpy package under the name np (★☆☆)
(hint: import … as …)

[2]
0s
import numpy as np
2. Print the numpy version and the configuration (★☆☆)
(hint: np.__version__, np.show_config)

[3]
0s
print(np.__version__,np.show_config)
1.21.5 <function show at 0x7f003d294c20>
3. Create a null vector of size 10 (★☆☆)
(hint: np.zeros)

[4]
0s
arr=np.zeros(10)
arr
array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
4. How to find the memory size of any array (★☆☆)
(hint: size, itemsize)

[5]
0s
arr.size*arr.itemsize
80
5. How to get the documentation of the numpy add function from the command line? (★☆☆)
(hint: np.info)

[6]
0s
np.info(np.add)
add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])

Add arguments element-wise.

Parameters
----------
x1, x2 : array_like
    The arrays to be added.
    If ``x1.shape != x2.shape``, they must be broadcastable to a common
    shape (which becomes the shape of the output).
out : ndarray, None, or tuple of ndarray and None, optional
    A location into which the result is stored. If provided, it must have
    a shape that the inputs broadcast to. If not provided or None,
    a freshly-allocated array is returned. A tuple (possible only as a
    keyword argument) must have length equal to the number of outputs.
where : array_like, optional
    This condition is broadcast over the input. At locations where the
    condition is True, the `out` array will be set to the ufunc result.
    Elsewhere, the `out` array will retain its original value.
    Note that if an uninitialized `out` array is created via the default
    ``out=None``, locations within it where the condition is False will
    remain uninitialized.
**kwargs
    For other keyword-only arguments, see the
    :ref:`ufunc docs <ufuncs.kwargs>`.

Returns
-------
add : ndarray or scalar
    The sum of `x1` and `x2`, element-wise.
    This is a scalar if both `x1` and `x2` are scalars.

Notes
-----
Equivalent to `x1` + `x2` in terms of array broadcasting.

Examples
--------
>>> np.add(1.0, 4.0)
5.0
>>> x1 = np.arange(9.0).reshape((3, 3))
>>> x2 = np.arange(3.0)
>>> np.add(x1, x2)
array([[  0.,   2.,   4.],
       [  3.,   5.,   7.],
       [  6.,   8.,  10.]])

The ``+`` operator can be used as a shorthand for ``np.add`` on ndarrays.

>>> x1 = np.arange(9.0).reshape((3, 3))
>>> x2 = np.arange(3.0)
>>> x1 + x2
array([[ 0.,  2.,  4.],
       [ 3.,  5.,  7.],
       [ 6.,  8., 10.]])
6. Create a null vector of size 10 but the fifth value which is 1 (★☆☆)
(hint: array[4])

[7]
0s
arr=np.zeros(10)
arr[4]=1
7. Create a vector with values ranging from 10 to 49 (★☆☆)
(hint: np.arange)

[8]
0s
arr=np.arange(10,50)
8. Reverse a vector (first element becomes last) (★☆☆)
(hint: array[::-1])

[9]
0s
arr[::-1]
array([49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,
       32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,
       15, 14, 13, 12, 11, 10])
9. Create a 3x3 matrix with values ranging from 0 to 8 (★☆☆)
(hint: reshape)

[10]
0s
np.arange(9).reshape(3,3)
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
10. Find indices of non-zero elements from [1,2,0,0,4,0] (★☆☆)
(hint: np.nonzero)

[11]
0s
arr=np.array([1,2,0,0,4,0]) 
np.nonzero(arr)
(array([0, 1, 4]),)
11. Create a 3x3 identity matrix (★☆☆)
(hint: np.eye)

[12]
0s
np.eye(3)
array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
12. Create a 3x3x3 array with random values (★☆☆)
(hint: np.random.random)

[13]
0s
np.random.randint(0,100,(3,3,3))
array([[[70, 33, 41],
        [54, 71, 90],
        [43,  0, 51]],

       [[15,  8,  6],
        [46, 67, 59],
        [23, 82,  1]],

       [[90, 40, 70],
        [29, 69, 52],
        [97, 69, 70]]])
13. Create a 10x10 array with random values and find the minimum and maximum values (★☆☆)
(hint: min, max)

[14]
0s
arr=np.random.randint(1,1000,(10,10))
print(np.min(arr),np.max(arr))
4 998
14. Create a random vector of size 30 and find the mean value (★☆☆)
(hint: mean)

[15]
0s
arr=np.random.rand(30)
np.mean(arr)
0.5514329457725681
15. Create a 2d array with 1 on the border and 0 inside (★☆☆)
(hint: array[1:-1, 1:-1])

[16]
0s
arr=np.ones((5,5))
arr[1:-1,1:-1] =0
arr
array([[1., 1., 1., 1., 1.],
       [1., 0., 0., 0., 1.],
       [1., 0., 0., 0., 1.],
       [1., 0., 0., 0., 1.],
       [1., 1., 1., 1., 1.]])
16. How to add a border (filled with 0's) around an existing array? (★☆☆)
(hint: np.pad)

[17]
0s
arr=np.ones((3,3))
np.pad(arr,(1,1),mode='constant',constant_values=0)
array([[0., 0., 0., 0., 0.],
       [0., 1., 1., 1., 0.],
       [0., 1., 1., 1., 0.],
       [0., 1., 1., 1., 0.],
       [0., 0., 0., 0., 0.]])
17. What is the result of the following expression? (★☆☆)
(hint: NaN = not a number, inf = infinity)

0 * np.nan
np.nan == np.nan
np.inf > np.nan
np.nan - np.nan
0.3 == 3 * 0.1
[18]
0s
print(0*np.nan,np.nan==np.nan,np.inf>np.nan,np.nan-np.nan,0.3==3*0.1,sep="\n")
nan
False
False
nan
False
18. Create a 5x5 matrix with values 1,2,3,4 just below the diagonal (★☆☆)
(hint: np.diag)

[19]
0s
arr1=np.diag([1,2,3,4])
arr2=np.pad(arr1,(1,1),mode='constant',constant_values=0)[:-1,1:]
arr2
array([[0, 0, 0, 0, 0],
       [1, 0, 0, 0, 0],
       [0, 2, 0, 0, 0],
       [0, 0, 3, 0, 0],
       [0, 0, 0, 4, 0]])
[20]
0s
np.diag([0,1,2,3,4,0])[:-1,1:]
array([[0, 0, 0, 0, 0],
       [1, 0, 0, 0, 0],
       [0, 2, 0, 0, 0],
       [0, 0, 3, 0, 0],
       [0, 0, 0, 4, 0]])
19. Create a 8x8 matrix and fill it with a checkerboard pattern (★☆☆)
(hint: array[::2])

[21]
0s
arr=np.zeros((8,8)).astype(int)
arr[::2,1::2]=1
arr[1::2,::2]=1
arr
array([[0, 1, 0, 1, 0, 1, 0, 1],
       [1, 0, 1, 0, 1, 0, 1, 0],
       [0, 1, 0, 1, 0, 1, 0, 1],
       [1, 0, 1, 0, 1, 0, 1, 0],
       [0, 1, 0, 1, 0, 1, 0, 1],
       [1, 0, 1, 0, 1, 0, 1, 0],
       [0, 1, 0, 1, 0, 1, 0, 1],
       [1, 0, 1, 0, 1, 0, 1, 0]])
20. Consider a (6,7,8) shape array, what is the index (x,y,z) of the 100th element?
(hint: np.unravel_index)

[21]
0s

21. Create a checkerboard 8x8 matrix using the tile function (★☆☆)
(hint: np.tile)

[22]
0s
ar=np.array([[0,1],[1,0]])
np.tile(ar,(4,4))
array([[0, 1, 0, 1, 0, 1, 0, 1],
       [1, 0, 1, 0, 1, 0, 1, 0],
       [0, 1, 0, 1, 0, 1, 0, 1],
       [1, 0, 1, 0, 1, 0, 1, 0],
       [0, 1, 0, 1, 0, 1, 0, 1],
       [1, 0, 1, 0, 1, 0, 1, 0],
       [0, 1, 0, 1, 0, 1, 0, 1],
       [1, 0, 1, 0, 1, 0, 1, 0]])
22. Normalize a 5x5 random matrix (★☆☆)
(hint: (x - min) / (max - min))

[23]
0s
arr=np.random.randint(0,1000,(5,5))
arr=(arr-arr.min())/(arr.max()-arr.min())
arr
array([[0.24013529, 0.48590755, 0.91657272, 0.81285231, 1.        ],
       [0.98647125, 0.5005637 , 0.5253664 , 0.        , 0.789177  ],
       [0.7113867 , 0.87711387, 0.38331454, 0.77903044, 0.46561443],
       [0.8162345 , 0.47914318, 0.01578354, 0.21984216, 0.4205186 ],
       [0.18940248, 0.96392334, 0.26832018, 0.24239008, 0.73167982]])
23. Create a custom dtype that describes a color as four unsigned bytes (RGBA) (★☆☆)
(hint: np.dtype)

[23]
0s

24. Multiply a 5x3 matrix by a 3x2 matrix (real matrix product) (★☆☆)
(hint: np.dot | @)

[24]
0s
arr_1 = np.random.random((5,3))
arr_2 = np.random.random((3,2))
print(arr_1 @ arr_2)
np.dot(arr_1,arr_2)
[[1.05210172 1.02930434]
 [1.05638863 0.90464534]
 [0.98649504 1.07678896]
 [1.19322857 0.96985979]
 [1.14282426 0.98153281]]
array([[1.05210172, 1.02930434],
       [1.05638863, 0.90464534],
       [0.98649504, 1.07678896],
       [1.19322857, 0.96985979],
       [1.14282426, 0.98153281]])
25. Given a 1D array, negate all elements which are between 3 and 8, in place. (★☆☆)
(hint: >, <=)

[25]
0s
np.arange(3,9) * -1
array([-3, -4, -5, -6, -7, -8])
26. What is the output of the following script? (★☆☆)
(hint: np.sum)

# Author: Jake VanderPlas

print(sum(range(5),-1))
from numpy import *
print(sum(range(5),-1))
[26]
0s
print(sum(range(5),-1))
print(sum(range(5),-1))
9
9
27. Consider an integer vector Z, which of these expressions are legal? (★☆☆)
Z**Z
2 << Z >> 2
Z <- Z
1j*Z
Z/1/1
Z<Z>Z
[28]
0s
Z=np.random.randint(1,100,(4,4))
Z**Z
2 << Z >> 2
Z <- Z
1j*Z
Z/1/1
Z<Z>Z

28. What are the result of the following expressions?
np.array(0) / np.array(0)
np.array(0) // np.array(0)
np.array([np.nan]).astype(int).astype(float)
[29]
0s
np.array(0) / np.array(0)
np.array(0) // np.array(0)
np.array([np.nan]).astype(int).astype(float)
/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide
  """Entry point for launching an IPython kernel.
/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: RuntimeWarning: divide by zero encountered in floor_divide
  
array([-9.22337204e+18])
29. How to round away from zero a float array ? (★☆☆)
(hint: np.uniform, np.copysign, np.ceil, np.abs)

[ ]
↳ 1 cell hidden
30. How to find common values between two arrays? (★☆☆)
(hint: np.intersect1d)

[ ]
↳ 1 cell hidden
31. How to ignore all numpy warnings (not recommended)? (★☆☆)
(hint: np.seterr, np.errstate)

[ ]
↳ 1 cell hidden
32. Is the following expressions true? (★☆☆)
(hint: imaginary number)

[ ]
↳ 2 cells hidden
33. How to get the dates of yesterday, today and tomorrow? (★☆☆)
(hint: np.datetime64, np.timedelta64)

[ ]
↳ 1 cell hidden
34. How to get all the dates corresponding to the month of July 2016? (★★☆)
(hint: np.arange(dtype=datetime64['D']))

[ ]
↳ 1 cell hidden
35. How to compute ((A+B)*(-A/2)) in place (without copy)? (★★☆)
(hint: np.add(out=), np.negative(out=), np.multiply(out=), np.divide(out=))

[ ]
↳ 1 cell hidden
36. Extract the integer part of a random array using 5 different methods (★★☆)
(hint: %, np.floor, np.ceil, astype, np.trunc)

[ ]
↳ 1 cell hidden
37. Create a 5x5 matrix with row values ranging from 0 to 4 (★★☆)
(hint: np.arange)

[ ]
↳ 1 cell hidden
38. Consider a generator function that generates 10 integers and use it to build an array (★☆☆)
(hint: np.fromiter)

[ ]
↳ 1 cell hidden
39. Create a vector of size 10 with values ranging from 0 to 1, both excluded (★★☆)
(hint: np.linspace)

[ ]
↳ 1 cell hidden
40. Create a random vector of size 10 and sort it (★★☆)
(hint: sort)

[ ]
↳ 1 cell hidden
41. How to sum a small array faster than np.sum? (★★☆)
(hint: np.add.reduce)

[ ]
↳ 1 cell hidden
42. Consider two random array A and B, check if they are equal (★★☆)
(hint: np.allclose, np.array_equal)

[ ]
↳ 1 cell hidden
43. Make an array immutable (read-only) (★★☆)
(hint: flags.writeable)

[ ]
↳ 1 cell hidden
44. Consider a random 10x2 matrix representing cartesian coordinates, convert them to polar coordinates (★★☆)
(hint: np.sqrt, np.arctan2)

[ ]
↳ 1 cell hidden
45. Create random vector of size 10 and replace the maximum value by 0 (★★☆)
(hint: argmax)

[ ]
↳ 1 cell hidden
46. Create a structured array with x and y coordinates covering the [0,1]x[0,1] area (★★☆)
(hint: np.meshgrid)

[ ]
↳ 1 cell hidden
47. Given two arrays, X and Y, construct the Cauchy matrix C (Cij =1/(xi - yj))
(hint: np.subtract.outer)

[ ]
↳ 1 cell hidden
48. Print the minimum and maximum representable value for each numpy scalar type (★★☆)
(hint: np.iinfo, np.finfo, eps)

[ ]
↳ 1 cell hidden
49. How to print all the values of an array? (★★☆)
(hint: np.set_printoptions)

[ ]
↳ 1 cell hidden
50. How to find the closest value (to a given scalar) in a vector? (★★☆)
(hint: argmin)

[ ]
↳ 1 cell hidden
51. Create a structured array representing a position (x,y) and a color (r,g,b) (★★☆)
(hint: dtype)

[ ]
↳ 1 cell hidden
52. Consider a random vector with shape (100,2) representing coordinates, find point by point distances (★★☆)
(hint: np.atleast_2d, T, np.sqrt)

[ ]
↳ 1 cell hidden
53. How to convert a float (32 bits) array into an integer (32 bits) in place?
(hint: astype(copy=False))

[ ]
↳ 1 cell hidden
54. How to read the following file? (★★☆)
(hint: np.genfromtxt)

[ ]
↳ 2 cells hidden
55. What is the equivalent of enumerate for numpy arrays? (★★☆)
(hint: np.ndenumerate, np.ndindex)

[ ]
↳ 1 cell hidden
56. Generate a generic 2D Gaussian-like array (★★☆)
(hint: np.meshgrid, np.exp)

[ ]
↳ 1 cell hidden
57. How to randomly place p elements in a 2D array? (★★☆)
(hint: np.put, np.random.choice)

[ ]
↳ 1 cell hidden
58. Subtract the mean of each row of a matrix (★★☆)
(hint: mean(axis=,keepdims=))

[ ]
↳ 1 cell hidden
59. How to sort an array by the nth column? (★★☆)
(hint: argsort)

[ ]
↳ 1 cell hidden
60. How to tell if a given 2D array has null columns? (★★☆)
(hint: any, ~)

[ ]
↳ 1 cell hidden
61. Find the nearest value from a given value in an array (★★☆)
(hint: np.abs, argmin, flat)

[ ]
↳ 1 cell hidden
62. Considering two arrays with shape (1,3) and (3,1), how to compute their sum using an iterator? (★★☆)
(hint: np.nditer)

[ ]
↳ 1 cell hidden
63. Create an array class that has a name attribute (★★☆)
(hint: class method)

[ ]
↳ 1 cell hidden
64. Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)? (★★★)
(hint: np.bincount | np.add.at)

[ ]
↳ 1 cell hidden
65. How to accumulate elements of a vector (X) to an array (F) based on an index list (I)? (★★★)
(hint: np.bincount)

[ ]
↳ 1 cell hidden
66. Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors (★★★)
(hint: np.unique)

[ ]
↳ 1 cell hidden
67. Considering a four dimensions array, how to get sum over the last two axis at once? (★★★)
(hint: sum(axis=(-2,-1)))

[ ]
↳ 1 cell hidden
68. Considering a one-dimensional vector D, how to compute means of subsets of D using a vector S of same size describing subset indices? (★★★)
(hint: np.bincount)

[ ]
↳ 1 cell hidden
69. How to get the diagonal of a dot product? (★★★)
(hint: np.diag)

[ ]
↳ 1 cell hidden
70. Consider the vector [1, 2, 3, 4, 5], how to build a new vector with 3 consecutive zeros interleaved between each value? (★★★)
(hint: array[::4])

[ ]
↳ 1 cell hidden
71. Consider an array of dimension (5,5,3), how to mulitply it by an array with dimensions (5,5)? (★★★)
(hint: array[:, :, None])

[ ]
↳ 1 cell hidden
72. How to swap two rows of an array? (★★★)
(hint: array[[]] = array[[]])

[ ]
↳ 1 cell hidden
73. Consider a set of 10 triplets describing 10 triangles (with shared vertices), find the set of unique line segments composing all the triangles (★★★)
(hint: repeat, np.roll, np.sort, view, np.unique)

[ ]
↳ 1 cell hidden
74. Given an array C that is a bincount, how to produce an array A such that np.bincount(A) == C? (★★★)
(hint: np.repeat)

[ ]
↳ 1 cell hidden
75. How to compute averages using a sliding window over an array? (★★★)
(hint: np.cumsum)

[ ]
↳ 1 cell hidden
76. Consider a one-dimensional array Z, build a two-dimensional array whose first row is (Z[0],Z[1],Z[2]) and each subsequent row is shifted by 1 (last row should be (Z[-3],Z[-2],Z[-1]) (★★★)
(hint: from numpy.lib import stride_tricks)

[ ]
↳ 1 cell hidden
77. How to negate a boolean, or to change the sign of a float inplace? (★★★)
(hint: np.logical_not, np.negative)

[ ]
↳ 1 cell hidden
78. Consider 2 sets of points P0,P1 describing lines (2d) and a point p, how to compute distance from p to each line i (P0[i],P1[i])? (★★★)
[ ]
↳ 1 cell hidden
79. Consider 2 sets of points P0,P1 describing lines (2d) and a set of points P, how to compute distance from each point j (P[j]) to each line i (P0[i],P1[i])? (★★★)
[ ]
↳ 1 cell hidden
80. Consider an arbitrary array, write a function that extract a subpart with a fixed shape and centered on a given element (pad with a fill value when necessary) (★★★)
(hint: minimum, maximum)

[ ]
↳ 1 cell hidden
81. Consider an array Z = [1,2,3,4,5,6,7,8,9,10,11,12,13,14], how to generate an array R = [[1,2,3,4], [2,3,4,5], [3,4,5,6], ..., [11,12,13,14]]? (★★★)
(hint: stride_tricks.as_strided)

[ ]
↳ 1 cell hidden
82. Compute a matrix rank (★★★)
(hint: np.linalg.svd) (suggestion: np.linalg.svd)

[ ]
↳ 1 cell hidden
83. How to find the most frequent value in an array?
(hint: np.bincount, argmax)

[ ]
↳ 1 cell hidden
84. Extract all the contiguous 3x3 blocks from a random 10x10 matrix (★★★)
(hint: stride_tricks.as_strided)

[ ]
↳ 1 cell hidden
85. Create a 2D array subclass such that Z[i,j] == Z[j,i] (★★★)
(hint: class method)

[ ]
↳ 1 cell hidden
86. Consider a set of p matrices wich shape (n,n) and a set of p vectors with shape (n,1). How to compute the sum of of the p matrix products at once? (result has shape (n,1)) (★★★)
(hint: np.tensordot)

[ ]
↳ 1 cell hidden
87. Consider a 16x16 array, how to get the block-sum (block size is 4x4)? (★★★)
(hint: np.add.reduceat)

[ ]
↳ 1 cell hidden
88. How to implement the Game of Life using numpy arrays? (★★★)
[ ]
↳ 1 cell hidden
89. How to get the n largest values of an array (★★★)
(hint: np.argsort | np.argpartition)

[ ]
↳ 1 cell hidden
90. Given an arbitrary number of vectors, build the cartesian product (every combinations of every item) (★★★)
(hint: np.indices)

[ ]
↳ 1 cell hidden
91. How to create a record array from a regular array? (★★★)
(hint: np.core.records.fromarrays)

[ ]
↳ 1 cell hidden
92. Consider a large vector Z, compute Z to the power of 3 using 3 different methods (★★★)
(hint: np.power, *, np.einsum)

[ ]
↳ 1 cell hidden
93. Consider two arrays A and B of shape (8,3) and (2,2). How to find rows of A that contain elements of each row of B regardless of the order of the elements in B? (★★★)
(hint: np.where)

[ ]
↳ 1 cell hidden
94. Considering a 10x3 matrix, extract rows with unequal values (e.g. [2,2,3]) (★★★)
[ ]
↳ 1 cell hidden
95. Convert a vector of ints into a matrix binary representation (★★★)
(hint: np.unpackbits)

[ ]
↳ 1 cell hidden
96. Given a two dimensional array, how to extract unique rows? (★★★)
(hint: np.ascontiguousarray)

[ ]
↳ 1 cell hidden
97. Considering 2 vectors A & B, write the einsum equivalent of inner, outer, sum, and mul function (★★★)
(hint: np.einsum)

[ ]
↳ 1 cell hidden
98. Considering a path described by two vectors (X,Y), how to sample it using equidistant samples (★★★)?
(hint: np.cumsum, np.interp)

[ ]
↳ 1 cell hidden
99. Given an integer n and a 2D array X, select from X the rows which can be interpreted as draws from a multinomial distribution with n degrees, i.e., the rows which only contain integers and which sum to n. (★★★)
(hint: np.logical_and.reduce, np.mod)

[ ]
↳ 1 cell hidden
100. Compute bootstrapped 95% confidence intervals for the mean of a 1D array X (i.e., resample the elements of an array with replacement N times, compute the mean of each sample, and then compute percentiles over the means). (★★★)
(hint: np.percentile)

[ ]
↳ 1 cell hidden

check
0s
completed at 9:37 AM
size: None = ..., hint
